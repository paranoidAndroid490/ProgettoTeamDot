#!/usr/bin/env python3

import requests
import sys

"""def get_repo_info(username, repo_name, token):

    url = f"https://api.github.com/repos/{username}/{repo_name}"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching repository info: {response.status_code}")
        print(response.text)
        sys.exit(1)

def main():
    
    username = "paranoidAndroid490"
    repo_name = "ProgettoTeamDot"
    
    # Token provided - consider using environment variables for security.
    token = "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"
    
    repo_data = get_repo_info(username, repo_name, token)
    
   # Print key repository details
    print(f"Repository: {repo_data.get('full_name')}")
    print(f"Description: {repo_data.get('description')}")
    print(f"Stars: {repo_data.get('stargazers_count')}")
    print(f"Forks: {repo_data.get('forks_count')}")
    print(f"Open Issues: {repo_data.get('open_issues_count')}")
    print(f"URL: {repo_data.get('html_url')}")

if __name__ == "__main__":
    main()
"""

#!/usr/bin/env python3

import requests
import sys

"""def get_all_repos(username, token):
    repos = []
    url = f"https://api.github.com/users/{username}/repos"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    params = {
        "per_page": 100,  # Maximum number of repos per page
        "page": 1
    }
    while True:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code != 200:
            print(f"Error fetching repositories: {response.status_code}")
            print(response.text)
            sys.exit(1)
        page_repos = response.json()
        if not page_repos:
            break
        repos.extend(page_repos)
        params["page"] += 1
    return repos

def main():
    
    username = "paranoidAndroid490"
    
    # Token provided - in a production environment, store the token securely.
    token = "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"
    
    repos = get_all_repos(username, token)
    
    if not repos:
        print(f"No repositories found for user '{username}'.")
    else:
        print(f"Repositories for {username}:")
        for repo in repos:
            print(f"- {repo.get('full_name')} : {repo.get('description')}")
            
if __name__ == "__main__":
    main()
"""
#!/usr/bin/env python3

"""import requests
import sys

def get_workflows(owner, repo, token):
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/workflows"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        print(f"Error fetching workflows: {response.status_code}")
        print(response.text)
        sys.exit(1)
    data = response.json()
    workflows = data.get("workflows", [])
    return workflows

def main():
    # Repository details
    owner = "paranoidAndroid490"
    repo = "ProgettoTeamDot"
    
    # Token provided - for real projects store this securely (e.g., environment variable)
    token = "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"
    
    workflows = get_workflows(owner, repo, token)
    
    if not workflows:
        print("No workflows found in the repository.")
    else:
        print("Workflows found:")
        # Build a list of workflow details
        workflow_list = []
        for wf in workflows:
            workflow_info = {
                "name": wf.get("name"),
                "path": wf.get("path"),
                "state": wf.get("state")
            }
            workflow_list.append(workflow_info)
            print(f"- Name: {workflow_info['name']} | Path: {workflow_info['path']} | State: {workflow_info['state']}")
    
if __name__ == "__main__":
    main()
"""
#!/usr/bin/env python3

import requests
import sys

def trigger_workflow(owner, repo, workflow_id, ref, inputs, token):
    """
    Trigger a manual workflow dispatch event for a given repository.
    
    Parameters:
      - owner: Repository owner.
      - repo: Repository name.
      - workflow_id: Workflow file name or ID.
      - ref: The git reference (branch or tag) on which to run the workflow.
      - inputs: Dictionary of inputs required by the workflow.
      - token: GitHub personal access token.
    """
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    data = {
        "ref": ref,
        "inputs": inputs
    }
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 204:
        print("Workflow triggered successfully.")
    else:
        print(f"Error triggering workflow: {response.status_code}")
        print(response.text)
        sys.exit(1)

def main():
    # Repository details
    owner = "paranoidAndroid490"
    repo = "ProgettoTeamDot"
    # The workflow file name as defined in the repository (adjust if needed)
    workflow_id = "manual.yml"
    
    # Branch on which to run the workflow
    ref = "master"
    
    # Inputs for the workflow.
    # This example passes a "person" input with the value "Lutech".
    inputs = {
        "name": "Lutech"
    }
    
    # GitHub personal access token.
    # In production, store and read this securely (for example, from an environment variable).
    token = "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"
    
    trigger_workflow(owner, repo, workflow_id, ref, inputs, token)

if __name__ == "__main__":
    for i in range(10):
        main()
